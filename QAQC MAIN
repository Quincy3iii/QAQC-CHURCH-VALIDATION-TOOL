<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Asset Data QA/QC Analyst v4.1</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .drop-zone {
            border: 2px dashed #cbd5e1;
            transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
            position: relative; 
        }
        .drop-zone.drag-over {
            background-color: #e2e8f0;
            border-color: #4f46e5;
        }
        .drop-zone input[type="file"] {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }
        .table-container::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        .table-container::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 10px;
        }
        .table-container::-webkit-scrollbar-thumb {
            background: #94a3b8;
            border-radius: 10px;
        }
        .table-container::-webkit-scrollbar-thumb:hover {
            background: #64748b;
        }
        .details-marker {
            transition: transform 0.2s;
        }
        details[open] .details-marker {
            transform: rotate(90deg);
        }
    </style>
</head>
<body class="bg-slate-100 text-slate-800">

    <div class="container mx-auto p-4 md:p-8 max-w-7xl">
        
        <!-- Step 1: File Upload and Audit Section -->
        <div class="bg-white rounded-lg shadow-md">
            <div class="p-6 border-b">
                <h1 class="text-2xl font-bold text-slate-900">1. Upload & Audit</h1>
            </div>
            <div class="p-6">
                <!-- Drop zone for CSV file -->
                <div id="drop-zone" class="drop-zone rounded-lg p-8 text-center">
                    <div class="flex flex-col items-center justify-center">
                        <svg class="w-12 h-12 text-slate-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path></svg>
                        <p class="text-slate-600 font-semibold">Drag & drop your CSV file here</p>
                        <p class="text-slate-500 text-sm">or click to select a file</p>
                        <p id="file-name" class="text-indigo-600 font-medium mt-2"></p>
                    </div>
                    <input type="file" id="csvFile" accept=".csv">
                </div>
                <!-- Building type selection dropdown -->
                <div id="pre-validation-step" class="mt-4" style="display: none;">
                    <label for="buildingType" class="block text-sm font-medium text-slate-700 mb-1">Select Building Type:</label>
                    <select id="buildingType" class="block w-full rounded-md border-slate-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                        <option value="">-- Please select --</option>
                        <option value="Meetinghouse">Meetinghouse, Seminary, or Institute</option>
                        <option value="Welfare">Welfare, Self Reliance, or Deseret Industry Facility</option>
                    </select>
                </div>
                <!-- Validation button -->
                <div class="mt-6">
                    <button id="validate-btn" class="w-full bg-indigo-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-slate-400 disabled:cursor-not-allowed" disabled>
                        Run Internal Audit
                    </button>
                </div>
            </div>
        </div>

        <!-- Step 2: Audit Report Section -->
        <div id="results-container" class="mt-8 bg-white rounded-lg shadow-md" style="display:none;">
            <div class="p-6 border-b flex justify-between items-center">
                <h2 class="text-2xl font-bold text-slate-900">2. Audit Report</h2>
                <div class="flex space-x-2">
                    <button id="download-csv-btn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" style="display: none;">
                        Download Detailed CSV
                    </button>
                    <button id="download-summary-btn" class="bg-green-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500" style="display: none;">
                        Download Summary CSV
                    </button>
                </div>
            </div>
            <!-- This container will be populated with collapsible sections for each work zone -->
            <div id="report-content" class="p-6 space-y-4">
            </div>
        </div>
    </div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // --- COMPREHENSIVE RULE ENGINE ---
    const validationRules = { 'ACU': { description: ['Split System Indoor Unit'], capacityUnit: ['TON'] }, 'AHU': { description: ['Air Handling Unit', 'Small Capacity Air Handling Unit'], capacityUnit: ['TON'] }, 'BHW': { description: ['Gas Fired Boiler'], capacityUnit: ['BTU'] }, 'BWH': { description: ['Electric Boiler'], capacityUnit: ['BTU'] }, 'CHL': { description: ['Chiller'], capacityUnit: ['TON'] }, 'CTU': { description: ['Cooling Tower'], capacityUnit: [] }, 'CU': { description: ['Air Cooled Condensing Unit', 'Split System Heat Pump'], capacityUnit: ['TON'] }, 'DF': { description: ['Duct Furnace'], capacityUnit: ['BTU'] }, 'EF': { description: ['Electric Furnace'], capacityUnit: ['BTU'] }, 'ERV': { description: ['Energy Recovery Ventilator (ERV)'], capacityUnit: ['BTU'] }, 'F': { description: ['Gas Fired Furnace', 'Hydronic Furnace'], capacityUnit: ['BTU'] }, 'RTU': { description: ['Roof Top Unit', 'Air Conditioning Package Unit'], capacityUnit: ['TON'] }, 'WAC': { description: ['Wall Mounted AC'], capacityUnit: ['BTU'] }, 'WSHP': { description: ['Water Source Heat Pump'], capacityUnit: ['TON'] }, 'ASR': { description: ['Asphalt Shingle Roof'], capacityUnit: ['Sq.Ft.'] }, 'BUA': { description: ['Built Up Asphalt/Bitumen Roof'], capacityUnit: ['Sq.Ft.'] }, 'CTR': { description: ['Concrete Tile Roof'], capacityUnit: ['Sq.Ft.'] }, 'MSR': { description: ['Metal Roof'], capacityUnit: ['Sq.Ft.'] }, 'PVC': { description: ['PVC Roof'], capacityUnit: ['Sq.Ft.'] }, 'SPM': { description: ['Single Ply Membrane Roof'], capacityUnit: ['Sq.Ft.'] }, 'SSM': { description: ['Standing-Seam Metal Roof'], capacityUnit: ['Sq.Ft.'] }, 'PLA': { description: ['Asphalt Parking Lot'], capacityUnit: ['Sq.Ft.'] }, 'PLC': { description: ['Concrete Parking Lot'], capacityUnit: ['Sq.Ft.'] }, 'PLD': { description: ['Dirt Parking Lot'], capacityUnit: ['Sq.Ft.'] }, 'PLG': { description: ['Gravel Parking Lot'], capacityUnit: ['Sq.Ft.'] }, 'SS': { description: ['Low Voltage Sound System'], capacityUnit: [] }, 'FLC': { description: ['Carpet Flooring'], capacityUnit: ['Sq.Ft.'] }, 'FLT': { description: ['Tile Flooring'], capacityUnit: ['Sq.Ft.'] }, 'FLV': { description: ['Vinyl Flooring'], capacityUnit: ['Sq.Ft.'] }, 'FLW': { description: ['Wood Flooring'], capacityUnit: ['Sq.Ft.'] }, 'FACP': { description: ['Fire Alarm Control Panel'], capacityUnit: ['AMP', 'AMPS'] }, 'FSSD': { description: ['Fire Riser (Dry)'], capacityUnit: ['Other (List in Comments)'] }, 'FSSW': { description: ['Fire Riser (Wet)', 'Deluge Fire Suppression System (Wet)'], capacityUnit: ['Other (List in Comments)'] }, 'FSSC': { description: ['FM-200 Fire Suppression System (Chemical)'], capacityUnit: ['Other (List in Comments)'] }, 'DOCK': { description: ['Dock Plate'], capacityUnit: ['Ton'] }, 'RUD': { description: ['Automatic Rollup Door'], capacityUnit: [] }, 'EASD': { description: ['Sliding Automatic or Manual Entrances Exterior (Storehouse Only)'], capacityUnit: [] }, 'ESD': { description: ['Swinging Automatic or Manual Entrances Exterior (Storehouse Only)'], capacityUnit: [] }, 'IASD': { description: ['Sliding Automatic or Manual Entrances Interior (Storehouse Only)'], capacityUnit: [] }, 'ISD': { description: ['Swinging Automatic or Manual Entrances Interior (Storehouse Only)'], capacityUnit: [] }, 'RD': { description: ['Revolving Door Entrances (Storehouse Only)'], capacityUnit: [] }, 'COOL': { description: ['Reach-In Display Cooler (Storehouse Only)', 'Walk-In Cooler (Storehouse Only)'], capacityUnit: ['BTU'] }, 'FRZ': { description: ['Reach-In Display Freezer (Storehouse Only)', 'Walk-In Freezer (Storehouse Only)'], capacityUnit: ['BTU'] }, 'FRK': { description: ['Forklift Truck - Electric', 'Forklift Truck - Diesel'], capacityUnit: ['Tons'] }, 'FLB': { description: ['Forklift Battery'], capacityUnit: ['Volts'] }, 'UH': { description: ['Gas Fired Unit Heater', 'Electric Unit Heater'], capacityUnit: ['BTU'] }, 'DRY': { description: ['Clothes Dryer (Storehouse Only)'], capacityUnit: ['N/A'] }, 'WSH': { description: ['Washing Machine (Storehouse Only)'], capacityUnit: ['N/A'] }, 'WDC': { description: ['Washer/Dryer Combo (Storehouse Only)'], capacityUnit: ['N/A'] }, 'FWC': { description: ['Compactor (Storehouse Only)'], capacityUnit: [] }, 'FWB': { description: ['Baler (Storehouse Only)'], capacityUnit: [] },};
    const welfareOnlyAcronyms = new Set(['DOCK', 'RUD', 'EASD', 'ESD', 'IASD', 'ISD', 'RD', 'COOL', 'FRZ', 'FRK', 'FLB', 'UH', 'DRY', 'WSH', 'WDC', 'FWC', 'FWB']);
    const refrigerantNotRequiredAssets = new Set(['Wood Flooring', 'Washing Machine (Storehouse Only)', 'Washer/Dryer Combo (Storehouse Only)', 'Vinyl Flooring', 'Tile Flooring', 'Swinging Automatic or Manual Entrances Interior (Storehouse Only)', 'Swinging Automatic or Manual Entrances Exterior (Storehouse Only)', 'Standing-Seam Metal Roof', 'Sliding Automatic or Manual Entrances Interior (Storehouse Only)', 'Sliding Automatic or Manual Entrances Exterior (Storehouse Only)', 'Single Ply Membrane Roof', 'Revolving Door Entrances (Storehouse Only)', 'PVC Roof', 'Metal Roof', 'Low Voltage Sound System', 'Gravel Parking Lot', 'Gas Fired Unit Heater', 'Gas Fired Furnace', 'Furnace', 'Hydronic Furnace', 'Gas Fired Boiler', 'Fire Suppression Hood', 'FM-200 Fire Suppression System (Chemical)', 'Forklift Battery', 'Fire Riser (Dry)', 'Fire Riser (Wet)', 'Electric Unit Heater', 'Electric Furnace', 'Dock Plate', 'Dirt Parking Lot', 'Deluge Fire Suppression System (Wet)', 'Concrete Tile Roof', 'Concrete Parking Lot', 'Compactor (Storehouse Only)', 'Clothes Dryer (Storehouse Only)', 'Carpet Flooring', 'Built Up Asphalt/Bitumen Roof', 'Baler (Storehouse Only)', 'Automatic Rollup Door', 'Asphalt Shingle Roof', 'Asphalt Parking Lot', 'Fire Alarm Control Panel']);
    const splitSystemIndoor = new Set(['ACU', 'AHU', 'CHL', 'F', 'WSHP']);
    const splitSystemOutdoor = new Set(['CTU', 'CU']);
    const refrigerantKeywords = ['R-22', 'R-410A', 'R-134A', 'R-404A', 'R-407C', 'R-507', 'R-123'];
    const requiredMeetinghouseAcronyms = { 'Sound System (SS)': 'SS', 'Fire Alarm Panel (FACP)': 'FACP', 'Fire Suppression System': ['FSSD', 'FSSW', 'FSSC'], 'Roof System': ['ASR', 'BUA', 'CTR', 'MSR', 'PVC', 'SPM', 'SSM'], 'Parking Lot': ['PLA', 'PLC', 'PLD', 'PLG'], 'Flooring': ['FLC', 'FLT', 'FLV', 'FLW'] };

    function getAcronym(assetNumber) {
        if (!assetNumber) return '';
        return (assetNumber.split('-')[0] || '').trim();
    }

    function validateRow(row, buildingType, zoneData) {
        const errors = [];
        const assetNumber = row['att_Asset #'] || '';
        const assetDescription = row['att_Asset Description'] || '';
        const capacityUnit = row['att_Capacity Unit'];
        const assetAcronym = getAcronym(assetNumber);
        const rule = validationRules[assetAcronym];
        
        const isTagOnPM = (row['Reason Not Tagged'] || '').trim().toLowerCase() === 'tag on pm (put reason in comments)';
        
        if (assetNumber.startsWith('TEMPLATE') && row['TagID'] !== 'DELETE') {
            errors.push({ field: 'TagID', value: row['TagID'], reason: 'Template asset must be marked for deletion with TagID = "DELETE".', category: 'Template Rows to Delete' });
            return errors;
        }

        if (row['TagID'] === 'DELETE') {
            if (row['att_Space (Floor)'] !== 'Not Found') errors.push({ field: 'att_Space (Floor)', value: row['att_Space (Floor)'], reason: 'Template row floor must be "Not Found".', category: 'Template Rows to Delete' });
            if (row['att_Room'] !== 'Template') errors.push({ field: 'att_Room', value: row['att_Room'], reason: 'Template row room must be "Template".', category: 'Template Rows to Delete' });
            if (row['Status'] !== 'Offline') errors.push({ field: 'Status', value: row['Status'], reason: 'Template row status must be "Offline".', category: 'Template Rows to Delete' });
            return errors;
        }

        if ((row['Reason Not Tagged'] || '').trim() === 'Not Found') {
            if (!row['TagID']) { 
                if (row['att_Space (Floor)'] !== 'Not Found') errors.push({ field: 'att_Space (Floor)', value: row['att_Space (Floor)'], reason: 'Floor must be "Not Found".', category: 'Missing Required Data' });
                if (row['att_Room'] !== 'Not Found') errors.push({ field: 'att_Room', value: row['att_Room'], reason: 'Room must be "Not Found".', category: 'Missing Required Data' });
                if (!row['att_Areas Served']) errors.push({ field: 'att_Areas Served', value: row['att_Areas Served'], reason: 'Areas Served cannot be blank.', category: 'Missing Required Data' });
                const noNameplate = "No Nameplate Information Available";
                if (row['att_Manufacturer'] !== noNameplate) errors.push({ field: 'att_Manufacturer', value: row['att_Manufacturer'], reason: `Must be "${noNameplate}".`, category: 'Missing Required Data' });
                if (row['att_Model'] !== noNameplate) errors.push({ field: 'att_Model', value: row['att_Model'], reason: `Must be "${noNameplate}".`, category: 'Missing Required Data' });
                if (row['att_Serial #'] !== noNameplate) errors.push({ field: 'att_Serial #', value: row['att_Serial #'], reason: `Must be "${noNameplate}".`, category: 'Missing Required Data' });

                let expectedComment = '';
                let reasonText = '';

                if (assetAcronym === 'FLW') {
                    expectedComment = 'no cultural center flw found';
                    reasonText = '"No Cultural Center FLW found"';
                } else {
                    expectedComment = `no ${assetAcronym} found`.toLowerCase();
                    reasonText = `"No ${assetAcronym} found"`;
                }
                
                if (!(row['att_Validation Comment'] || '').toLowerCase().includes(expectedComment)) {
                    errors.push({ field: 'att_Validation Comment', value: row['att_Validation Comment'], reason: `Comment must contain ${reasonText}.`, category: 'Missing Required Data' });
                }
                return errors; 
            }
        }

        const roomName = row['att_Room'] || '';
        if (roomName) {
            const words = roomName.split(' ');
            if (words.length === 1 && /^[A-Z]?\d+$/i.test(words[0])) {
                errors.push({ field: 'att_Room', value: roomName, reason: 'Room number requires a descriptive prefix (e.g., \'Mechanical M2\').', category: 'Formatting & Syntax Errors' });
            }
            if (words.some(w => w && w[0] !== w[0].toUpperCase())) {
                errors.push({ field: 'att_Room', value: roomName, reason: 'Improper capitalization. All words should be capitalized.', category: 'Formatting & Syntax Errors' });
            }
            const cardinalAbbreviations = /\b(N|S|E|W|NE|NW|SE|SW)\b/g;
            if (cardinalAbbreviations.test(roomName)) {
                errors.push({ field: 'att_Room', value: roomName, reason: 'Use full cardinal directions (e.g., "Southwest" instead of "SW").', category: 'Formatting & Syntax Errors' });
            }
            const possessives = { "Bishops": "Bishop's", "Clerks": "Clerk's", "Presidents": "President's", "Mothers": "Mother's", "Members": "Member's" };
            for (const [wrong, right] of Object.entries(possessives)) {
                if (roomName.includes(wrong)) {
                     errors.push({ field: 'att_Room', value: roomName, reason: `Missing apostrophe. Should be "${right}".`, category: 'Formatting & Syntax Errors' });
                }
            }
        }

        const validationComment = (row['att_Validation Comment'] || '').toLowerCase();
        const areasServed = (row['att_Areas Served'] || '').toLowerCase();
        if (validationComment.includes(`serves ${areasServed}`) && areasServed && !areasServed.includes('classroom')) {
            errors.push({ field: 'att_Validation Comment', value: row['att_Validation Comment'], reason: 'Redundant comment. Information is already in "Areas Served".', category: 'Formatting & Syntax Errors' });
        }
        
        if (!assetNumber) errors.push({ field: 'att_Asset #', value: '(empty)', reason: 'Asset # is a required field.', category: 'Missing Required Data' });
        
        if (!isTagOnPM) {
            const inServiceDate = row['att_In-Service Date'];
            if (!inServiceDate || String(inServiceDate).trim() === '' || isNaN(new Date(inServiceDate).getTime())) {
                 errors.push({ field: 'att_In-Service Date', value: inServiceDate, reason: 'In-Service Date cannot be blank and must be a valid date.', category: 'Missing Required Data' });
            }
            
            const ngmCondition = row['att_NGM CA-Condition'];
            if (!ngmCondition || String(ngmCondition).trim() === '') {
                errors.push({ field: 'att_NGM CA-Condition', value: ngmCondition, reason: 'NGM CA-Condition cannot be blank.', category: 'Missing Required Data' });
            }
        }

        const spaceFloor = row['att_Space (floor)'];
        const environment = row['Environment'];
        if (spaceFloor === 'Attic' && environment !== 'Wide variation in temp/humidity/dust') {
            errors.push({ field: 'Environment', value: environment, reason: 'For Attic space, Environment must be "Wide variation in temp/humidity/dust".', category: 'Miscellaneous Errors' });
        }
        if (spaceFloor === 'Roof' && environment !== 'Extremes of temperature') {
            errors.push({ field: 'Environment', value: environment, reason: 'For Roof space, Environment must be "Extremes of temperature".', category: 'Miscellaneous Errors' });
        }
        
        if (assetAcronym && !assetNumber.startsWith('TEMPLATE')) {
            if (!rule) {
                errors.push({ field: 'att_Asset #', value: assetAcronym, reason: `Unknown Acronym '${assetAcronym}'.`, category: 'Formatting & Syntax Errors' });
            } else {
                 if (rule.capacityUnit && rule.capacityUnit.length > 0) {
                     if (!rule.capacityUnit.includes(capacityUnit)) {
                         errors.push({ field: 'att_Capacity Unit', value: capacityUnit, reason: `Incorrect unit. Expected '${rule.capacityUnit.join(' or ')}' for '${assetDescription}'.`, category: 'Formatting & Syntax Errors' });
                     }
                     if (capacityUnit === 'Other (List in Comments)' && 
                         (assetAcronym === 'FSSW' || assetAcronym === 'FSSD') && 
                         !(row['att_Validation Comment'] || '').toUpperCase().includes('LBS')) {
                         errors.push({ field: 'att_Validation Comment', value: row['att_Validation Comment'], reason: 'Comment must contain "LBS" for FSSW/FSSD when capacity unit is "Other".', category: 'Missing Required Data' });
                     }
                 } else {
                     if (capacityUnit !== 'N/A') {
                         errors.push({ field: 'att_Capacity Unit', value: capacityUnit, reason: `Capacity Unit must be "N/A" for '${assetDescription}'.`, category: 'Formatting & Syntax Errors' });
                     }
                     const capacityQty = row['att_Capacity Quantity'];
                     if (capacityQty && Number(capacityQty) !== 0) {
                         errors.push({ field: 'att_Capacity Quantity', value: capacityQty, reason: `Capacity Quantity must be "0" when no unit is required.`, category: 'Formatting & Syntax Errors' });
                     }
                 }
            }
        }
        
        // --- UPDATED: New logic for Gas Fired Furnace coil check ---
        if (assetDescription === 'Gas Fired Furnace') {
            const comment = (row['att_Validation Comment'] || '').toLowerCase();
            const hasCoilAndRefrigerant = comment.includes('coil') && refrigerantKeywords.some(r => comment.toUpperCase().includes(r));
            const hasNoCoilMessage = comment.includes('no coil attached.');

            if (!hasCoilAndRefrigerant && !hasNoCoilMessage) {
                errors.push({ 
                    field: 'att_Validation Comment', 
                    value: row['att_Validation Comment'], 
                    reason: 'Gas Furnace comment must either state "No coil attached." or mention "Coil" and a refrigerant type.', 
                    category: 'Missing Required Data' 
                });
            }
        }

        if (!isTagOnPM && row['Refrigerant'] && refrigerantNotRequiredAssets.has(assetDescription)) {
            errors.push({ field: 'Refrigerant', value: row['Refrigerant'], reason: `Refrigerant not required for '${assetDescription}'.`, category: 'Miscellaneous Errors' });
        }
        
        const model = (row['att_Model'] || '').trim();
        if (model.includes(' ') && model !== 'No Nameplate Information Available') {
            errors.push({ field: 'att_Model', value: row['att_Model'], reason: 'Model number should not contain spaces.', category: 'Formatting & Syntax Errors' });
        }
        const serial = (row['att_Serial #'] || '').trim();
        if (serial.includes(' ') && serial !== 'No Nameplate Information Available') {
            errors.push({ field: 'att_Serial #', value: row['att_Serial #'], reason: 'Serial number should not contain spaces.', category: 'Formatting & Syntax Errors' });
        }

        const noNameplate = "No Nameplate Information Available";
        if (row['att_Manufacturer'] === noNameplate) {
            if (row['att_Model'] !== noNameplate) errors.push({ field: 'att_Model', value: row['att_Model'], reason: `Inconsistent Nameplate Data.`, category: 'Miscellaneous Errors' });
            if (row['att_Serial #'] !== noNameplate) errors.push({ field: 'att_Serial #', value: row['att_Serial #'], reason: `Inconsistent Nameplate Data.`, category: 'Miscellaneous Errors' });
        }

        const photoCount = [row['Image'], row['Image 2'], row['Image 3'], row['Image 4'], row['Image 5']].filter(Boolean).length;
        if (photoCount < 3) errors.push({ field: 'Images', value: `${photoCount} found`, reason: `Requires at least 3 photos.`, category: 'Missing Required Data' });

        if (buildingType === 'Meetinghouse' && welfareOnlyAcronyms.has(assetAcronym)) {
            errors.push({ field: 'att_Asset #', value: assetNumber, reason: `Asset type '${assetDescription}' should not be in a Meetinghouse.`, category: 'Miscellaneous Errors' });
        }

        if (assetAcronym === 'DF') {
            const parentTag = row['att_Parent Asset Tag'] || '';
            if (!parentTag) {
                errors.push({ field: 'att_Parent Asset Tag', value: '(empty)', reason: 'Duct Furnace (DF) must have a parent asset.', category: 'Missing Required Data' });
            } else {
                const parentAsset = zoneData.find(asset => asset['TagID'] === parentTag);
                if (!parentAsset) {
                    errors.push({ field: 'att_Parent Asset Tag', value: parentTag, reason: `Parent asset with TagID '${parentTag}' not found in this work zone.`, category: 'Miscellaneous Errors' });
                } else {
                    const parentAcronym = getAcronym(parentAsset['att_Asset #']);
                    if (parentAcronym !== 'AHU') {
                        errors.push({ field: 'att_Parent Asset Tag', value: parentTag, reason: `Parent asset must be an Air Handling Unit (AHU), but found '${parentAcronym}'.`, category: 'Miscellaneous Errors' });
                    }
                }
            }
        }
        
        if (assetAcronym === 'FLB' && !(row['att_Parent Asset Tag'] || '').includes('FRK')) {
            errors.push({ field: 'att_Parent Asset Tag', value: row['att_Parent Asset Tag'], reason: 'Forklift Battery (FLB) must have a Forklift (FRK) as its parent.', category: 'Missing Required Data' });
        }

        return errors;
    }

    function analyzeWorkZoneData(data, buildingType) {
        let zoneResults = {
            errors: [],
            systemStatus: {},
            indoorCount: 0,
            outdoorCount: 0,
            primarySurveyors: 'N/A'
        };

        const assetNumbers = new Set();
        const foundDuplicates = new Set();

        data.forEach(row => {
            const assetNum = row['att_Asset #'];
            if (assetNum) {
                if (assetNumbers.has(assetNum) && !foundDuplicates.has(assetNum)) {
                    zoneResults.errors.push({ assetNum, reason: `Duplicate Asset # '${assetNum}' found in this work zone.`, category: 'Formatting & Syntax Errors' });
                    foundDuplicates.add(assetNum);
                }
                assetNumbers.add(assetNum);
            }
            const acronym = getAcronym(row['att_Asset #']);
            if (splitSystemIndoor.has(acronym)) zoneResults.indoorCount++;
            if (splitSystemOutdoor.has(acronym)) zoneResults.outdoorCount++;
        });

        if (buildingType === 'Meetinghouse') {
            const foundAcronyms = new Set(data.map(a => getAcronym(a['att_Asset #'])));
            const notFoundAssets = new Set(data.filter(a => (a['Reason Not Tagged'] || '').trim() === 'Not Found').map(a => getAcronym(a['att_Asset #'])));

            for (const systemName in requiredMeetinghouseAcronyms) {
                const acronyms = Array.isArray(requiredMeetinghouseAcronyms[systemName]) ? requiredMeetinghouseAcronyms[systemName] : [requiredMeetinghouseAcronyms[systemName]];
                const isFound = acronyms.some(a => foundAcronyms.has(a));
                const isDocumentedNotFound = acronyms.some(a => notFoundAssets.has(a));

                if (isFound && !isDocumentedNotFound) zoneResults.systemStatus[systemName] = 'Found';
                else if (isDocumentedNotFound) zoneResults.systemStatus[systemName] = 'Not Found';
                else zoneResults.systemStatus[systemName] = 'Missing';
            }
        }
        
        const surveyorCounts = data.reduce((acc, row) => {
            const creator = row['Created by'];
            if (creator) acc[creator] = (acc[creator] || 0) + 1;
            return acc;
        }, {});
        if (Object.keys(surveyorCounts).length) {
            zoneResults.primarySurveyors = Object.keys(surveyorCounts).join(', ');
        }

        return zoneResults;
    }

    // --- UI INTERACTION LOGIC ---
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('csvFile');
    const fileNameDisplay = document.getElementById('file-name');
    const validateBtn = document.getElementById('validate-btn');
    const buildingTypeSelect = document.getElementById('buildingType');
    const preValidationStep = document.getElementById('pre-validation-step');
    const downloadCsvBtn = document.getElementById('download-csv-btn');
    const downloadSummaryBtn = document.getElementById('download-summary-btn');
    let allReportsData = {};

    fileInput.addEventListener('change', handleFileSelect);
    
    buildingTypeSelect.addEventListener('change', () => {
        validateBtn.disabled = !fileInput.files.length || !buildingTypeSelect.value;
    });

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(e => dropZone.addEventListener(e, preventDefaults, false));
    ['dragenter', 'dragover'].forEach(e => dropZone.addEventListener(e, () => dropZone.classList.add('drag-over'), false));
    ['dragleave', 'drop'].forEach(e => dropZone.addEventListener(e, () => dropZone.classList.remove('drag-over'), false));

    dropZone.addEventListener('drop', handleDrop, false);
    validateBtn.addEventListener('click', validateData);
    downloadCsvBtn.addEventListener('click', downloadCSV);
    downloadSummaryBtn.addEventListener('click', downloadSummaryCSV);

    function preventDefaults(e) { e.preventDefault(); e.stopPropagation(); }
    function handleDrop(e) { handleFiles(e.dataTransfer.files); }
    function handleFileSelect(e) { handleFiles(e.target.files); }

    function handleFiles(files) {
        if (files.length > 0) {
            fileInput.files = files;
            fileNameDisplay.textContent = files[0].name;
            preValidationStep.style.display = 'block';
            validateBtn.disabled = !buildingTypeSelect.value;
        }
    }

    function validateData() {
        if (!fileInput.files.length || !buildingTypeSelect.value) {
            console.error('Please select a file and a building type.');
            return;
        }

        validateBtn.disabled = true;
        validateBtn.innerHTML = `<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Validating...`;

        Papa.parse(fileInput.files[0], {
            header: true,
            skipEmptyLines: true,
            complete: function(results) {
                const data = results.data;
                const buildingType = buildingTypeSelect.value;

                const workZoneGroups = data.reduce((acc, row) => {
                    const workZone = row['WORK ZONE'] || 'Unknown Work Zone';
                    if (!acc[workZone]) {
                        acc[workZone] = [];
                    }
                    acc[workZone].push(row);
                    return acc;
                }, {});

                allReportsData = {};

                for (const workZone in workZoneGroups) {
                    const zoneData = workZoneGroups[workZone];
                    let allErrors = [];
                    let templateRowErrors = false;

                    zoneData.forEach((row, index) => {
                        const rowErrors = validateRow(row, buildingType, zoneData);
                        if (rowErrors.length > 0) {
                            allErrors.push(...rowErrors.map(err => ({ ...err, rowNum: index + 2, assetNum: row['att_Asset #'], workZone: workZone, ninoxId: row['Ninox ID'] })));
                            if (rowErrors.some(err => err.category === 'Template Rows to Delete')) {
                                templateRowErrors = true;
                            }
                        }
                    });

                    const zoneAnalysis = analyzeWorkZoneData(zoneData, buildingType);
                    zoneAnalysis.errors.forEach(err => allErrors.push({ ...err, rowNum: 'Work Zone-wide', assetNum: err.assetNum, workZone: workZone, ninoxId: 'N/A' }));
                    
                    allReportsData[workZone] = {
                        data: zoneData,
                        errors: allErrors,
                        analysis: zoneAnalysis,
                        templateRowErrors: templateRowErrors
                    };
                }
                
                updateResultsUI(allReportsData);
                
                validateBtn.disabled = false;
                validateBtn.innerHTML = 'Run Internal Audit';
            },
            error: function(err) {
                console.error('Error parsing CSV file:', err);
                validateBtn.disabled = false;
                validateBtn.innerHTML = 'Run Internal Audit';
            }
        });
    }

    function updateResultsUI(allReports) {
        const reportContent = document.getElementById('report-content');
        reportContent.innerHTML = '';

        for (const workZone in allReports) {
            const report = allReports[workZone];
            const { data, errors, analysis, templateRowErrors } = report;

            const details = document.createElement('details');
            details.className = 'bg-white rounded-lg shadow-inner border border-slate-200';
            details.open = true;

            const summary = document.createElement('summary');
            summary.className = 'p-4 cursor-pointer font-bold text-lg text-slate-800 flex justify-between items-center';
            summary.innerHTML = `<span>Work Zone: ${workZone}</span><svg class="w-5 h-5 details-marker" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>`;
            
            const zoneReportContainer = document.createElement('div');
            zoneReportContainer.className = 'p-6 border-t';

            let reportHTML = `
                <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                    <div class="md:col-span-2">
                        <h3 class="text-lg font-semibold text-slate-800 mb-4">Error Summary</h3>
                        <div class="space-y-3 error-summary-list"></div>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold text-slate-800 mb-4">System Verifications</h3>
                        <div class="space-y-3 system-verifications-list"></div>
                    </div>
                </div>
                <div class="p-6 border-t mt-6">
                        <h3 class="text-lg font-semibold text-slate-800 mb-4">Error Details</h3>
                        <div class="table-container overflow-x-auto">
                            <table class="min-w-full divide-y divide-slate-200 error-table">
                                <thead class="bg-slate-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Ninox ID</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Asset #</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Row</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Field with Error</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Invalid Value</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Reason for Error/Rule Violated</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-slate-200 error-body"></tbody>
                            </table>
                        </div>
                        <div class="py-10 text-center text-green-600 font-semibold no-errors-message" style="display:none;">
                            <svg class="w-16 h-16 mx-auto mb-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                            All assets in this work zone are valid. No issues found!
                        </div>
                </div>
            `;
            zoneReportContainer.innerHTML = reportHTML;

            const errorBody = zoneReportContainer.querySelector('.error-body');
            const errorSummaryList = zoneReportContainer.querySelector('.error-summary-list');
            const systemVerificationsList = zoneReportContainer.querySelector('.system-verifications-list');
            const errorTable = zoneReportContainer.querySelector('.error-table');
            const noErrorsMessage = zoneReportContainer.querySelector('.no-errors-message');

            const errorCounts = { 'Review Required': 0, 'Formatting & Syntax Errors': 0, 'Missing Required Data': 0, 'Miscellaneous Errors': 0 };
            errors.forEach(err => {
                if (err.category !== 'Template Rows to Delete') {
                    if (errorCounts[err.category] !== undefined) errorCounts[err.category]++;
                    else errorCounts['Miscellaneous Errors']++;
                }
            });
            
            const templateRows = data.filter(r => r.TagID === 'DELETE' || r['att_Asset #']?.startsWith('TEMPLATE'));
            let templateLabel = "Template Rows to Delete";
            if (templateRows.length > 0) {
                templateLabel = templateRowErrors ? "Template Rows to Mark for Deletion" : "Template Rows Marked for Deletion";
            }
            errorCounts[templateLabel] = templateRows.length;

            for (const category in errorCounts) {
                if (category === 'Template Rows to Delete' && errorCounts[category] === 0) continue;
                errorSummaryList.innerHTML += `<div class="flex justify-between items-center text-sm"><p class="text-slate-600">${category}</p><span class="font-bold text-slate-800 bg-slate-200 rounded-full px-2 py-0.5">${errorCounts[category]}</span></div>`;
            }

            systemVerificationsList.innerHTML += `<div class="flex justify-between items-center text-sm"><p class="text-slate-600">Primary Surveyor(s)</p><span class="font-semibold text-slate-800">${analysis.primarySurveyors}</span></div>`;
            
            const hvacMatch = analysis.indoorCount === analysis.outdoorCount;
            systemVerificationsList.innerHTML += `<div class="flex justify-between items-center text-sm"><p class="text-slate-600">HVAC Split System Counts</p><span class="font-semibold ${hvacMatch ? 'text-green-600' : 'text-red-600'}">Indoor: ${analysis.indoorCount} – Outdoor: ${analysis.outdoorCount} ${hvacMatch ? '✅' : '❌'}</span></div>`;

            for (const systemName in analysis.systemStatus) {
                let statusText;
                let statusColor;
                if (analysis.systemStatus[systemName] === 'Found') {
                    statusText = '✅ Found';
                    statusColor = 'text-green-600';
                } else if (analysis.systemStatus[systemName] === 'Not Found') {
                    statusText = '⚠️ Documented Not Found';
                    statusColor = 'text-amber-600';
                } else {
                    statusText = '❌ Missing';
                    statusColor = 'text-red-600 font-bold';
                }
                systemVerificationsList.innerHTML += `<div class="flex justify-between items-center text-sm"><p class="text-slate-600">${systemName}</p><span class="font-semibold ${statusColor}">${statusText}</span></div>`;
            }

            if (errors.length > 0) {
                errors.forEach(error => {
                    const tr = errorBody.insertRow();
                    tr.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-500">${error.ninoxId || 'N/A'}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900">${error.assetNum || 'N/A'}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-500">${error.rowNum}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-slate-800">${error.field || 'Work Zone-wide'}</td>
                        <td class="px-6 py-4 text-sm text-slate-700"><div class="truncate max-w-xs" title="${String(error.value || '')}">${String(error.value || 'N/A')}</div></td>
                        <td class="px-6 py-4 text-sm text-red-600">${error.reason}</td>
                    `;
                });
                errorTable.style.display = 'table';
                noErrorsMessage.style.display = 'none';
            } else {
                errorTable.style.display = 'none';
                noErrorsMessage.style.display = 'block';
            }
            
            details.appendChild(summary);
            details.appendChild(zoneReportContainer);
            reportContent.appendChild(details);
        }
        
        document.getElementById('results-container').style.display = 'block';
        downloadCsvBtn.style.display = 'block';
        downloadSummaryBtn.style.display = 'block';
    }

    function downloadCSV() {
        try {
            const originalFileName = fileInput.files[0] ? fileInput.files[0].name.replace('.csv', '') : 'Asset_Report';
            let allErrorsForCSV = [];

            for (const workZone in allReportsData) {
                const report = allReportsData[workZone];
                report.errors.forEach(error => {
                    allErrorsForCSV.push({
                        "Work Zone": workZone,
                        "Ninox ID": error.ninoxId || 'N/A',
                        "Asset #": error.assetNum || 'N/A',
                        "Row #": error.rowNum,
                        "Field with Error": error.field || 'Work Zone-wide',
                        "Invalid Value": String(error.value || 'N/A'),
                        "Reason for Error": error.reason
                    });
                });
            }

            if (allErrorsForCSV.length === 0) {
                console.log("No errors to report!");
                return;
            }

            const csv = Papa.unparse(allErrorsForCSV);
            
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            
            const link = document.createElement("a");
            const url = URL.createObjectURL(blob);
            link.setAttribute("href", url);
            link.setAttribute("download", `${originalFileName}_Error_Report.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

        } catch (error) {
            console.error("Error generating CSV:", error);
        }
    }

    function downloadSummaryCSV() {
        try {
            const originalFileName = fileInput.files[0] ? fileInput.files[0].name.replace('.csv', '') : 'Asset_Report';
            let summaryData = [];

            for (const workZone in allReportsData) {
                const report = allReportsData[workZone];
                const errorCounts = { 'Review Required': 0, 'Formatting & Syntax Errors': 0, 'Missing Required Data': 0, 'Miscellaneous Errors': 0 };
                let templateCount = 0;

                report.errors.forEach(err => {
                    if (err.category === 'Template Rows to Delete') {
                        templateCount++;
                    } else if (errorCounts[err.category] !== undefined) {
                        errorCounts[err.category]++;
                    } else {
                        errorCounts['Miscellaneous Errors']++;
                    }
                });

                for (const category in errorCounts) {
                    if (errorCounts[category] > 0) {
                        summaryData.push({
                            "Work Zone": workZone,
                            "Error Category": category,
                            "Count": errorCounts[category]
                        });
                    }
                }
                if (templateCount > 0) {
                    summaryData.push({
                        "Work Zone": workZone,
                        "Error Category": "Template Rows to Delete",
                        "Count": templateCount
                    });
                }
            }

            if (summaryData.length === 0) {
                console.log("No errors to summarize!");
                return;
            }

            const csv = Papa.unparse(summaryData);
            
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            
            const link = document.createElement("a");
            const url = URL.createObjectURL(blob);
            link.setAttribute("href", url);
            link.setAttribute("download", `${originalFileName}_Summary_Report.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

        } catch (error) {
            console.error("Error generating Summary CSV:", error);
        }
    }
});
</script>

</body>
</html>

